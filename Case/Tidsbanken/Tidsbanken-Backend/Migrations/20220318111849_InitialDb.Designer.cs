// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tidsbanken_Backend.Models.Data;

#nullable disable

namespace Tidsbanken_Backend.Migrations
{
    [DbContext(typeof(TidsbankenDbContext))]
    [Migration("20220318111849_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Tidsbanken_Backend.Models.Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastTimeEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("VacationRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("VacationRequestId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = "1",
                            CreationDate = new DateTime(2022, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "hey man ur a cool cat >:)",
                            VacationRequestId = 2
                        });
                });

            modelBuilder.Entity("Tidsbanken_Backend.Models.Domain.IneligiblePeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IneligiblePeriods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2022, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2022, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Forbidden! No cats will rest on this day.",
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("Tidsbanken_Backend.Models.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Email = "Sindre@test.no",
                            FirstName = "Sindre",
                            IsAdmin = true,
                            LastName = "Nygård",
                            PhoneNumber = 98765434,
                            ProfilePicture = "https://bobleesays.com/wp-content/uploads/2012/07/beautiful-tuxedo-cat-wide-high-resolution-wallpaper-for-desktop-background-download-tuxedo-cat-images-free-300x240.jpg"
                        },
                        new
                        {
                            Id = "2",
                            Email = "Signe@test.no",
                            FirstName = "Signe",
                            IsAdmin = false,
                            LastName = "Nygård",
                            PhoneNumber = 98765433,
                            ProfilePicture = "https://torange.biz/photofxnew/66/HD/very-vivid-colours-fragment-view-cat-66325.jpg"
                        },
                        new
                        {
                            Id = "3",
                            Email = "Sondre@test.no",
                            FirstName = "Sondre",
                            IsAdmin = false,
                            LastName = "Nygård",
                            PhoneNumber = 98765432,
                            ProfilePicture = "https://mcdn.wallpapersafari.com/medium/36/8/RmU0Au.jpg"
                        },
                        new
                        {
                            Id = "KdsQcW5Vb575sLEfIaX3mR01HKDTEqbg@clients",
                            Email = "Admin@test.no",
                            FirstName = "Test",
                            IsAdmin = true,
                            LastName = "Admin",
                            PhoneNumber = 98765434,
                            ProfilePicture = "https://bobleesays.com/wp-content/uploads/2012/07/beautiful-tuxedo-cat-wide-high-resolution-wallpaper-for-desktop-background-download-tuxedo-cat-images-free-300x240.jpg"
                        });
                });

            modelBuilder.Entity("Tidsbanken_Backend.Models.Domain.VacationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("VacationStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VacationStatusId");

                    b.ToTable("VacationRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2022, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "two days off coz im a cat",
                            UserId = "1",
                            VacationStatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2022, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2022, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Christmas 4 cats",
                            UserId = "2",
                            VacationStatusId = 2
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2022, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "cat time (for cat)",
                            UserId = "3",
                            VacationStatusId = 3
                        });
                });

            modelBuilder.Entity("Tidsbanken_Backend.Models.Domain.VacationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ApprovalTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("VacationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdminId = 0,
                            ApprovalTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Rejected"
                        },
                        new
                        {
                            Id = 2,
                            AdminId = 0,
                            ApprovalTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 3,
                            AdminId = 0,
                            ApprovalTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved"
                        });
                });

            modelBuilder.Entity("Tidsbanken_Backend.Models.Domain.Comment", b =>
                {
                    b.HasOne("Tidsbanken_Backend.Models.Domain.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId");

                    b.HasOne("Tidsbanken_Backend.Models.Domain.VacationRequest", "VacationRequest")
                        .WithMany("Comments")
                        .HasForeignKey("VacationRequestId");

                    b.Navigation("Author");

                    b.Navigation("VacationRequest");
                });

            modelBuilder.Entity("Tidsbanken_Backend.Models.Domain.IneligiblePeriod", b =>
                {
                    b.HasOne("Tidsbanken_Backend.Models.Domain.User", "User")
                        .WithMany("IneligiblePeriods")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tidsbanken_Backend.Models.Domain.VacationRequest", b =>
                {
                    b.HasOne("Tidsbanken_Backend.Models.Domain.User", "User")
                        .WithMany("VacationRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tidsbanken_Backend.Models.Domain.VacationStatus", "VacationStatus")
                        .WithMany()
                        .HasForeignKey("VacationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VacationStatus");
                });

            modelBuilder.Entity("Tidsbanken_Backend.Models.Domain.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("IneligiblePeriods");

                    b.Navigation("VacationRequests");
                });

            modelBuilder.Entity("Tidsbanken_Backend.Models.Domain.VacationRequest", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
