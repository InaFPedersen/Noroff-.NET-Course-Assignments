using Auth0.ManagementApi;
using Auth0.ManagementApi.Models;
using Newtonsoft.Json.Linq;
using PasswordGenerator;
using RestSharp;
using Tidsbanken_Backend.Models.DTOs.Admin;
using Tidsbanken_Backend.Models.DTOs.Self;

namespace Tidsbanken_Backend.Services
{
	public class ManagementAccess
	{
		private readonly IConfiguration _configuration;

		public ManagementAccess(IConfiguration configuration)
		{
			_configuration = configuration;
		}

		/// <summary>
		/// Retrieves the access token for API calls to the Auth0 Management. 
		/// </summary>
		/// <returns>Returns the access token as a string.</returns>
		public string GetManagementAccessToken()
		{
			var client = new RestClient("https://" + _configuration["Auth0:Domain"] + "/oauth/token");
			var request = new RestRequest(Method.POST);
			request.AddHeader("content-type", "application/json");
			string jsonParameter = "{\"client_id\":\"" + _configuration["Auth0Management:client_id"] + 
				"\",\"client_secret\":\"" + _configuration["Auth0Management:client_secret"] + 
				"\",\"audience\":\"https://" + _configuration["Auth0:Domain"] + 
				"/api/v2/\",\"grant_type\":\"client_credentials\"}";
			request.AddParameter("application/json", jsonParameter, ParameterType.RequestBody);
			IRestResponse response = client.Execute(request);
			return (string)JObject.Parse(response.Content).GetValue("access_token")!;
		}

		/// <summary>
		/// Creates the Auth0 Management client to be used in further API calls.
		/// </summary>
		/// <returns>Returns a ManagementApiClient object to the Auth0 domain.</returns>
		private ManagementApiClient GetManagementClient()
		{
			string token = GetManagementAccessToken();
			var client = new ManagementApiClient(token, _configuration["Auth0:Domain"]);
			return client;
		}

		/// <summary>
		/// Creates the user in the Auth0 database. 
		/// The password is autogenerated by the PasswordGenerator package and
		/// added to the created user object before sending the object to Auth0.
		/// </summary>
		/// <param name="userDto"></param>
		/// <returns>Returns the userId generated by Auth0</returns>
		public async Task<string> CreateUser(AdminCreateUserDTO userDto)
		{
			ManagementApiClient client = GetManagementClient();
			string password = new Password(
				includeLowercase: true, 
				includeUppercase: true, 
				includeNumeric: true, 
				includeSpecial: true, 
				passwordLength: 16).Next();
			UserCreateRequest user = new()
			{
				Email = userDto.Email,
				FirstName = userDto.FirstName,
				LastName = userDto.LastName,
				Password = password,
				Connection = _configuration["Auth0:Connection"],
				FullName = userDto.FirstName + " " + userDto.LastName,
			};
			var response = await client.Users.CreateAsync(user);
			return response.UserId;
		}

		/// <summary>
		/// Updates the user in the Auth0 database.
		/// Creates a user update object that is sent to the Auth0 management API.
		/// </summary>
		/// <param name="userDto"></param>
		/// <returns>Returns the updated user.</returns>
		public async Task<User> UpdateUser(SelfUpdateUserDTO userDto)
		{
			ManagementApiClient client = GetManagementClient();
			UserUpdateRequest user = new()
			{
				Email = userDto.Email,
				FirstName = userDto.FirstName,
				LastName = userDto.LastName,
				Connection = _configuration["Auth0:Connection"],
				FullName = userDto.FirstName + " " + userDto.LastName,
			};
			var response = await client.Users.UpdateAsync(userDto.Id, user);
			return response;
		}

		/// <summary>
		/// Deletes the user from the Auth0 database by sending in the user ID.
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public async Task DeleteUser(string id)
		{
			ManagementApiClient client = GetManagementClient();
			await client.Users.DeleteAsync(id);
		}

		/// <summary>
		/// Calls the API to send the specified user a password change mail to their email.
		/// This ensures that only Auth0 handles the password change.
		/// </summary>
		/// <param name="email"></param>
		/// <returns></returns>
		public IRestResponse ChangePassword(string email)
		{
			var client = new RestClient("https://" + _configuration["Auth0:Domain"] +
				"/dbconnections/change_password");
			var request = new RestRequest(Method.POST);
			request.AddHeader("content-type", "application/json");
			string JsonParameter = "{\"client_id\": \"" + _configuration["Auth0Management:client_id"] + 
				"\",\"email\": \"" + email + "\",\"connection\": \"Username-Password-Authentication\"}";
			request.AddParameter("application/json", JsonParameter, ParameterType.RequestBody);
			var response = client.Execute(request);
			return response;
		}
	}
}